# b-*- encoding: utf-8 -*-

import csv
import unicodedata


def elimina_tildes(s):
    if not isinstance(s, unicode):
        s = s.decode('utf-8')
    return ''.join((c for c in unicodedata.normalize('NFD', s) if unicodedata.category(c) != 'Mn'))


data = {}
data_paises = {}
mapa_paises = {
    'A': 'base.es',
    'alemania': 'base.de',
    'portugal': 'base.pt',
    'rusia': 'base.ru',
    'rep.eslovaca': 'base.sk',
    'francia': 'base.fr',
    'pakistan': 'base.pk',
    'espana': 'base.es',
    'italia': 'base.it',
    'belgica': 'base.be',
    'kenia': 'base.ke',
    'marruecos': 'base.ma',
    'bolivia': 'base.bo',
    'suecia': 'base.se',
    'colombia': 'base.co',
    'irlanda': 'base.ie',
    'finlandia': 'base.fi',
}

cuentas_a_ignorar = [
    '430000812',
    '430001339',
    '430000607',
    '430001346',
    '430000668',
    '430000577',
    '430000300',
    'HILADOS',
    '430000887',
    '430000551',
    '430000766',
    '430001611',
    '430000284',
    '430001509',
    '431002090',
    '431003257',
    '431003269',
    '431000071',
    '431002371',
    '431003218',
    '431001569',
    '430001434',
    '430000742',
    '430001309',
    '430001697',
    '430001748',
    '430001784',
    '430002001',
    '430002129',
    '430002132',
    '430002159',
    '430002168',
    '430002193',
    '430002205',
    '430002212',
    '430002230',
    '430002234',
    '430002245',
    '430002279',
    '430002319',
    '430002368',
    '430002473',
    '430002475',
    '430002515',
    '430002523',
    '430002525',
    '430002900',
    '430002936',
    '400002984',
    '43003275',
    '431003301',
    '431000005',
    '431000035',
    '431000061',
    '431000111',
    '431000152',
    '431000157',
    '431000165',
    '431000200',
    '431000215',
    '431000224',
    '431000239',
    '431000290',
    '431000302',
    '431000317',
    '431000381',
    '431000385',
    '431000387',
    '431000405',
    '431000421',
    '431000453',
    '431000543',
    '431000561',
    '431000567',
    '431000726',
    '431000847',
    '431000870',
    '431000872',
    '431000881',
    '431000882',
    '431000883',
    '431000930',
    '431000939',
    '431000953',
    '431000980',
    '431000984',
    '431000992',
    '431001001',
    '431001008',
    '431001009',
    '431001014',
    '431001030',
    '431001058',
    '431001078',
    '431001084',
    '431001109',
    '431001138',
    '431001175',
    '431001177',
    '431001230',
    '431001535',
    '431001563',
    '431001566',
    '431001613',
    '431001619',
    '431001655',
    '431001657',
    '431001660',
    '431001694',
    '431001731',
    '431001733',
    '431001735',
    '431001820',
    '431001826',
    '431001892',
    '431001895',
    '431001973',
    '431002077',
    '431002084',
    '431002095',
    '431002102',
    '431002108',
    '431002120',
    '431002125',
    '431002170',
    '431002182',
    '431002186',
    '431002219',
    '431002237',
    '431002944',
    '431002946',
    '431002977',
    '431002992',
    '431001117',
    '431003177',
    '431003184',
    '431000880',
    '431003176',
    '431002508',
    '431001174',
    '431001708',
    '431003189',
    '431001095',
    '431003196',
    '431003195',
    '431000706',
    '431003194',
    '431003198',
    '431003119',
    '431000929',
    '431000341',
    '431000734',
    '431001497',
    '431003199',
    '431003197',
    '431003058',
    '431002213',
    '431003201',
    '431003210',
    '431002208',
    '431003200',
    '431003212',
    '431003228',
    '431003209',
    '431003216',
    '431000950',
    '431003222',
    '431000134',
    '431002442',
    '431002283',
    '431003105',
    '431003236',
    '431002105',
    '431003122',
    '431003144',
    '431002335',
    '431000636',
    '431003183',
    '431003245',
    '430002011',
    '430002013',
    '431002240',
    '431002242',
    '431002243',
    '431002247',
    '431002267',
    '431002270',
    '431002273',
    '431002274',
    '431002275',
    '431002276',
    '431002277',
    '431002281',
    '431002284',
    '431002286',
    '431002287',
    '431002288',
    '431002292',
    '431002297',
    '431002298',
    '431002300',
    '431002301',
    '431002302',
    '431002303',
    '431002304',
    '431002305',
    '431002306',
    '431002310',
    '431002311',
    '431002312',
    '431002316',
    '431002318',
    '431002321',
    '431002333',
    '431002334',
    '431002341',
    '431002343',
    '431002345',
    '431002347',
    '431002348',
    '431002349',
    '431002350',
    '431002351',
    '431002356',
    '431002359',
    '431002360',
    '431002362',
    '431002363',
    '431002366',
    '431002370',
    '431002376',
    '431002377',
    '431002378',
    '431002379',
    '431002381',
    '431002382',
    '431002385',
    '431002386',
    '431002390',
    '431002391',
    '431002392',
    '431002393',
    '431002394',
    '431002396',
    '431002398',
    '431002400',
    '431002401',
    '431002406',
    '431002414',
    '431002415',
    '431002416',
    '431002419',
    '431002424',
    '431002430',
    '431002432',
    '431002434',
    '431002435',
    '431002436',
    '431002440',
    '431002443',
    '431002444',
    '431002445',
    '431002449',
    '431002451',
    '431002457',
    '431002458',
    '431002460',
    '431002463',
    '431002470',
    '431002471',
    '431002478',
    '431002479',
    '431002480',
    '431002484',
    '431002485',
    '431002489',
    '431002490',
    '431002492',
    '431002493',
    '431002495',
    '431002498',
    '431002501',
    '431002505',
    '431002507',
    '431002510',
    '431002511',
    '431002513',
    '431002519',
    '431002520',
    '431002523',
    '431002526',
    '431002527',
    '431002528',
    '431002833',
    '431002837',
    '431002838',
    '431002839',
    '431002840',
    '431002843',
    '431002844',
    '431002845',
    '431002847',
    '431002848',
    '431002849',
    '431002854',
    '431002856',
    '431002859',
    '431002861',
    '431002864',
    '431002870',
    '431002871',
    '431002872',
    '431002874',
    '431002878',
    '431002879',
    '431002883',
    '431002888',
    '431002889',
    '431002891',
    '431002892',
    '431002893',
    '431002895',
    '431002896',
    '431002898',
    '431002901',
    '431002903',
    '431002907',
    '431002911',
    '431002915',
    '431002917',
    '431002920',
    '431002921',
    '431002923',
    '431002927',
    '431002929',
    '431002932',
    '431002933',
    '431002934',
    '431002940',
    '431002944',
    '431002946',
    '431002977',
    '431002992',
    '431001117',
    '431003177',
    '431003184',
    '431000880',
    '431003176',
    '431002508',
    '431001174',
    '431001708',
    '431003189',
    '431001095',
    '431003196',
    '431003195',
    '431000706',
    '431003194',
    '431003198',
    '431003119',
    '431000929',
    '431000341',
    '431000734',
    '431001497',
    '431003199',
    '431003197',
    '431003058',
    '431002213',
    '431003201',
    '431003210',
    '431002208',
    '431003200',
    '431003212',
    '431003228',
    '431003209',
    '431003216',
    '431000950',
    '431003222',
    '431000134',
    '431002442',
    '431002283',
    '431003105',
    '431003236',
    '431002105',
    '431003122',
    '431003144',
    '431002335',
    '431000636',
    '431003183',
    '431003245',
    '430002011',
    '430002013',
    '431002240',
    '431002242',
    '431002243',
    '431002247',
    '431002267',
    '431002270',
    '431002273',
    '431002274',
    '431002275',
    '431002276',
    '431002277',
    '431002281',
    '431002284',
    '431002286',
    '431002287',
    '431002288',
    '431002292',
    '431002297',
    '431002298',
    '431002300',
    '431002301',
    '431002302',
    '431002303',
    '431002304',
    '431002305',
    '431002306',
    '431002310',
    '431002311',
    '431002312',
    '431002316',
    '431002318',
    '431002321',
    '431002333',
    '431002334',
    '431002341',
    '431002343',
    '431002345',
    '431002347',
    '431002348',
    '431002349',
    '431002350',
    '431002351',
    '431002356',
    '431002359',
    '431002360',
    '431002362',
    '431002363',
    '431002366',
    '431002370',
    '431002376',
    '431002377',
    '431002378',
    '431002379',
    '431002381',
    '431002382',
    '431002385',
    '431002386',
    '431002390',
    '431002391',
    '431002392',
    '431002393',
    '431002394',
    '431002396',
    '431002398',
    '431002400',
    '431002401',
    '431002406',
    '431002414',
    '431002415',
    '431002416',
    '431002419',
    '431002424',
    '431002430',
    '431002432',
    '431002434',
    '431002435',
    '431002436',
    '431002440',
    '431002443',
    '431002444',
    '431002445',
    '431002449',
    '431002451',
    '431002457',
    '431002458',
    '431002460',
    '431002463',
    '431002470',
    '431002471',
    '431002478',
    '431002479',
    '431002480',
    '431002484',
    '431002485',
    '431002489',
    '431002490',
    '431002492',
    '431002493',
    '431002495',
    '431002498',
    '431002501',
    '431002505',
    '431002507',
    '431002510',
    '431002511',
    '431002513',
    '431002519',
    '431002520',
    '431002523',
    '431002526',
    '431002527',
    '431002528',
    '431002833',
    '431002837',
    '431002838',
    '431002839',
    '431002840',
    '431002843',
    '431002844',
    '431002845',
    '431002847',
    '431002848',
    '431002849',
    '431002854',
    '431002856',
    '431002859',
    '431002861',
    '431002864',
    '431002870',
    '431002871',
    '431002872',
    '431002874',
    '431002878',
    '431002879',
    '431002883',
    '431002888',
    '431002889',
    '431002891',
    '431002892',
    '431002893',
    '431002895',
    '431002896',
    '431002898',
    '431002901',
    '431002903',
    '431002907',
    '431002911',
    '431002915',
    '431002917',
    '431002920',
    '431002921',
    '431002923',
    '431002927',
    '431002929',
    '431002932',
    '431002933',
    '431002934',
    '431002940',
]

with open('/home/esal1/Talleres_Cubells/git_repositories/odoo/odoo/addons/base/res/res.country.state.csv',
          'r') as csvfile:
    spamreader = csv.DictReader(csvfile, delimiter=',', quotechar='"')
    for row in spamreader:
        data[elimina_tildes(row['name']).upper()] = 'base.%s' % (row['id'],)
        data_paises[elimina_tildes(row['name']).upper()] = 'base.%s' % (row['country_id:id'],)

header = ['id', 'sigla_nacion', 'cif_dni', 'vat',
          'property_account_payable_id/id', 'name', 'street',
          'forma_de_pago', 'codigo_banco', 'codigo_agencia', 'dc', 'ccc', 'iban',
          'codigo_sigla', 'street2', 'numero1', 'zip', 'city', 'state_id/id', 'country_id/id', 'phone',
          'fax', 'email', 'supplier', 'customer', 'company_type', 'property_account_receivable_id/id']
data_keys = data.keys()

with open('../data/ficheros_originales/clientes.csv', 'r') as csvfile:
    with open('../data/clientes/res.partner.csv', 'w') as write_file:
        spamreader = csv.reader(csvfile, delimiter=';')
        spamwriter = csv.writer(write_file, delimiter=';',
                                quotechar='"')
        spamwriter.writerow(header)
        row_num = 0
        for row in spamreader:
            row_num += 1
            if row_num == 1 or not row[5]:
                # omitimos la cabecera
                # omitimos clientes sin nombre
                continue
            row_aux = row
            row_aux[0] = '%s_cliente' % (row[0],)
            if row[4] and row[4] in cuentas_a_ignorar:
                row_aux[4] = ''
            nombre_ciudad = elimina_tildes(row[18].decode('iso-8859-1').encode('utf8')).upper()
            nombre_pais = elimina_tildes(row[19].decode('iso-8859-1').encode('utf8')).upper()
            if nombre_ciudad:
                if nombre_ciudad in data_keys:
                    row_aux[18] = data[nombre_ciudad]
                    row_aux[19] = data_paises[nombre_ciudad]
                elif nombre_ciudad == 'STA CRUZ DE TENERIFE':
                    row_aux[18] = 'base.state_es_tf'
                    row_aux[19] = 'base.es'
                else:
                    existe = False
                    for x in data_keys:
                        if nombre_ciudad in x:
                            data[elimina_tildes(nombre_ciudad)] = data[x]
                            data_paises[elimina_tildes(nombre_ciudad)] = data[x]
                            row_aux[18] = data[x]
                            row_aux[19] = data_paises[x]
                            existe = True
                            break
                    if not existe:
                        if nombre_ciudad == 'POLAND':
                            # Caso especial
                            row_aux[18] = ''
                            row_aux[19] = 'base.pl'
                        else:
                            print nombre_ciudad
                            row_aux[18] = ''
            if nombre_pais and 'base' not in row[19]:
                row_aux[19] = mapa_paises[nombre_pais.lower()]

            row_aux.append('0')
            row_aux.append('1')
            row_aux.append('person')
            # account receivable
            row_aux.append(row_aux[4])
            spamwriter.writerow(row_aux)
